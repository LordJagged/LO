include "lib/cli";
include "lib/fs";

fn main() -> u32 {
    let input = fs::read_file("./aoc2020/4.test.txt");
    defer Vec::free(input);

    let valid_passwords = 0;

    let passwords = StringSlice::from_string(input).stack_store();
    // defer passwords.stack_free();

    loop {
        let password = passwords.cut_at("\n\n");
        if is_valid_password(password) {
            valid_passwords += 1;
        };

        if passwords->size == 0 {
            break;
        };
    };

    print_u32(valid_passwords);
    puts("\n");

    return 0;
};

fn is_valid_password(str: StringSlice) -> bool {
    // TODO: validate password
    fputs(wasi::FD_STDERR, str);
    fputs(wasi::FD_STDERR, "\n------------------\n");
    return false;
};

fn StringSlice::stack_store(self) -> &StringSlice {
    let ptr = stack::alloc(sizeof StringSlice) as &StringSlice;
    *ptr = self;
    return ptr;
};

fn StringSlice::stack_free(&self) {
    stack::free(sizeof StringSlice);
};

fn StringSlice::cut_at(&self, delim: StringSlice) -> StringSlice {
    let cut_start = 0;
    let cut_width = 0;
    loop {
        if cut_start == self->size {
            break;
        };

        if (*self).char_at(cut_start) == delim.char_at(cut_width) {
            cut_width += 1;
        } else {
            cut_width = 0;
        };

        if cut_width == delim.size {
            break;
        };

        cut_start += 1;
    };

    let piece = StringSlice {
        data: self->data,
        size: cut_start - cut_width - 1
    };

    self->data as u32 += cut_start + 1;
    self->size -= cut_start;

    return piece;
};
