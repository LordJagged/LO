(mod lib/cli)
(mod lib/wasi_io)
(mod lib/args)
(mod lib/lole/parser)
(mod lib/lole/expand)
(mod lib/lole/compiler)
(mod lib/lole/codegen)

(fn main [] void (
    {input_file := (get_input_file)}
    (defer (Heap/free {input_file . file_name . data}))

    {source := (WasiIO/fd_read_all {input_file . fd})}
    (defer (Vec/free source))

    {parse_res := (Lole/Parser/parse
        {input_file . file_name}
        (Vec/as_slice source)
    )}
    (if (not {parse_res . ok}) (do
        (return (print_err_and_exit {parse_res . data}))
    ))
    (defer (Vec<Lole/Ast/SExpr>/free {parse_res . data}))

    {expand_res := (Lole/Expand/expand {parse_res . data})}
    (if (not {expand_res . ok}) (do
        (return (print_err_and_exit {expand_res . data}))
    ))
    (defer (Vec<Lole/Ast/SExpr>/free {expand_res . data}))

    {wasm_module := (Lole/Wasm/WasmModule/new)}
    (defer (Lole/Wasm/WasmModule/free wasm_module))

    {compile_res := (Lole/Compiler/compile {parse_res . data} wasm_module)}
    (if (not {compile_res . ok}) (do
        (return (print_err_and_exit {compile_res . data}))
    ))

    {binary := (Lole/CodeGen/codegen wasm_module)}
    (defer (Vec/free binary))

    (print_str binary)
))

(struct InputFile
    (fd u32)
    (file_name StringSlice)
)

(fn get_input_file [] InputFile (
    {args := (Args/load)}
    (defer (Args/free args))

    (if {args . argc != 2} (do
        (return (InputFile
            :fd Wasi/FD_STDIN
            :file_name (StringSlice/clone "<internal>")
        ))
    ))

    {file_name := (StringSlice/clone (Args/get args 1))}
    {open_res := (WasiIO/fd_open file_name)}
    (if {open_res . err != 0} (do
        (fputs Wasi/FD_STDERR "Error: cannot read file: ")
        (fputs Wasi/FD_STDERR file_name)
        (fputs Wasi/FD_STDERR "\n")
        (Wasi/proc_exit 1)
    ))

    (return (InputFile
        :fd {open_res . fd}
        :file_name file_name
    ))
))

(fn print_err_and_exit [(err (& Lole/Ast/CompileError))] void (
    {parse_err := (* err)}
    (defer (Lole/Ast/CompileError/free parse_err))

    (fputs Wasi/FD_STDERR {parse_err . loc . file_name})
    (fputs Wasi/FD_STDERR ":")
    (fprint_u32 Wasi/FD_STDERR {parse_err . loc . line})
    (fputs Wasi/FD_STDERR ":")
    (fprint_u32 Wasi/FD_STDERR {parse_err . loc . col})
    (fputs Wasi/FD_STDERR " - ")
    (fprint_str Wasi/FD_STDERR {parse_err . message})
    (fputs Wasi/FD_STDERR "\n")

    (return (Wasi/proc_exit 1))
))
