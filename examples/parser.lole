(mem m1 :min 1000)

(export parse :as parse)

;; exporting for testing
(export mem m1 :as memory)
(export skip_space :as skip_space)
(export char_at :as char_at)
(export index_to_position :as index_to_position)

(struct StringSlice
    (data ptr)
    (size u32)
)

(fn StringSlice/char_at [(self StringSlice) (index u32)] [u8] (
    (i32.load8_u {{self . data} + index})
))

; TODO: implement
(fn parse [(chars StringSlice)] [
    bool ; ok
    u32 ; index
] (
    {index : u32}
    {index = (skip_space chars 0)}

    (return 0 0)
))

; TODO: add support for comments
(fn skip_space [(chars StringSlice) (index u32)] [
    u32 ; index
] (
    {res : CharAtResult}

    (loop (
        {res = (char_at chars index)}

        (if {{res . ok} != 1}
            (break)
        )

        (if {{res . char} != 32} ; space
            (break)
        )

        {index = {index + 1}}
    ))

    index
))

;; TODO: should match be added?
;; (fn is_space [(char u8)] [bool] (
;;     (match char
;;         ({' ' | '\n' | '\t'} true)
;;         (else false)
;;     )
;; ))

(struct CharAtResult (ok bool) (char u8))

(fn char_at [(chars StringSlice) (index u32)] [CharAtResult] (
    (if {index >= {chars . size}}
        (return (struct.new CharAtResult 0 0))
    )

    (struct.new CharAtResult 1 (StringSlice/char_at chars index))
))

(fn index_to_position [(chars StringSlice) (index u32)] [u32 u32] (
    {line : u32}
    {col : u32}
    {(line col) = (pack 1 1)}

    {char_index : u32}
    {char_index = 0}
    (loop (
        (if {char_index >= {chars . size}} (break))
        (if {char_index >= index} (break))

        {char : u32}
        {char = (StringSlice/char_at chars char_index)}

        (if {char == 10} (do ;; '\n'
            {col = 1}
            {line = {line + 1}}
            {char_index = {char_index + 1}}
            (continue)
        ))

        {col = {col + 1}}
        {char_index = {char_index + 1}}
    ))

    (pack line col)
))
