(mem m1 :min 1000)
(export mem m1 :as memory)

(fn parse ((data i32) (size i32)) (
    i32 ; ok
    i32 ; index
) () (
    ; TODO: implement
    (return (i32 0) (i32 0))
))

(fn skip_space ((data i32) (size i32) (index i32)) (
    i32 ; index
) (
    (char_ok i32)
    (char i32)
) (
    ;; (loop (
    ;;     (set (char_ok char) (char_at data size index))

    ;;     (if (i32.ne char_ok 1)
    ;;         (break)
    ;;     )

    ;;     (if (i32.ne char (i32 32)) ; space
    ;;         (break)
    ;;     )

    ;;     (set index (i32.add index (i32 1)))
    ;; ))

    (i32 0)
))

(fn char_at ((data i32) (size i32) (index i32)) (
    i32 ; ok
    i32 ; char
) () (
    (if (i32.ge_s index size)
        (return (i32 0) (i32 0))
    )

    (return
        (i32 1)
        (i32.load8_u (i32.add data index))
    )
))

(export parse :as parse)
(export char_at :as char_at)
