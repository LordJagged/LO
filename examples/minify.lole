(mod lib/cli)
(mod lib/wasi_io)
(mod lib/args)
(mod lib/parser)

(fn main [] [] (
    {(do {fd : u32} {file_name : StringSlice}) = (get_input_file)}
    (defer (Heap/free {file_name . data}))

    {&source : (& String) = (fd_read_all fd)}
    (defer (Vec/free &source))

    {parse_res : Parser/ParseResult = (Parser/parse file_name (Vec/as_slice &source))}
    (if (not {parse_res . ok}) (do
        (return (print_err_and_exit {parse_res . data}))
    ))

    {&exprs : (& Vec<Parser/SExpr>) = {parse_res . data}}
    (defer (Vec/free &exprs)) ; TODO: free inner data of &exprs

    (dump_exprs &exprs)
    (puts "\n")
))

(fn dump_exprs [(&exprs (& Vec<Parser/SExpr>))] [] (
    {i : u32 = 0}

    (loop (
        (if {i == (Vec/len &exprs)}
            (break)
        )

        (dump_expr {Parser/SExpr @ (Vec/at &exprs i)})

        (if {i != {(Vec/len &exprs) - 1}} (do
            (puts " ")
        ))

        {i += 1}
    ))
))

(fn dump_expr [(expr Parser/SExpr)] [] (
    (if {expr . kind == (enum.kind Parser/SExpr/Atom)} (do
        {atom : Parser/SExpr/Atom = {Parser/SExpr/Atom @ {expr . ref}}}
        (print_str {atom . &value})
        (return)
    ))

    (puts "(")

    {list : Parser/SExpr/List = {Parser/SExpr/List @ {expr . ref}}}
    (dump_exprs {list . &value})

    (puts ")")
))

(fn get_input_file [] [u32 StringSlice] (
    {args : Args = (Args/load)}
    (defer (Args/free args))

    (if {args . argc != 2} (do
        (return FD_STDIN (StringSlice/clone "<internal>"))
    ))

    {file_name : StringSlice = (StringSlice/clone (Args/get args 1))}
    {(do {err : u32} {fd : u32}) = (fd_open file_name)}
    (if {err != 0} (do
        (fputs FD_STDERR "Error: cannot read file: ")
        (fputs FD_STDERR file_name)
        (fputs FD_STDERR "\n")
        (proc_exit 1)
    ))

    (return fd file_name)
))

(fn print_err_and_exit [(&err (& Parser/CompileError))] [] (
    {parse_err : Parser/CompileError = {Parser/CompileError @ &err}}
    (defer (Parser/CompileError/free parse_err))

    (fputs FD_STDERR {parse_err . loc . file_name})
    (fputs FD_STDERR ":")
    (fprint_u32 FD_STDERR {parse_err . loc . line})
    (fputs FD_STDERR ":")
    (fprint_u32 FD_STDERR {parse_err . loc . col})
    (fputs FD_STDERR " - ")
    (fprint_str FD_STDERR {parse_err . &message})
    (fputs FD_STDERR "\n")

    (return (proc_exit 1))
))
