(mod lib/cli)
(mod lib/wasi_io)
(mod lib/args)
(mod parser)

(fn main [] [] (
    {file_name : StringSlice}
    {fd : u32 = FD_STDIN}

    {args : Args = (Args/load)}
    (if {args . argc == 1} (do
        {file_name = (StringSlice/clone (Args/get args 0))}

        {(do {err : u32} fd) = (fd_open file_name)}
        (if {err != 0} (do
            (print_str_slice "Error: cannot read file: ")
            (print_str_slice file_name)
            (println)
            (return (proc_exit 1))
        ))
    ))
    (Args/free args)

    {&source : (& String) = (fd_read_all fd)}
    {parse_res : Parser/ParseResult = (Parser/parse file_name (Vec/as_slice &source))}

    (if (not {parse_res . ok}) (do
        {parse_err : Parser/CompileError = {Parser/CompileError @ {parse_res . data}}}
        (print_str_slice {parse_err . loc . file_name})
        (print_str_slice ":")
        (print_u32 {parse_err . loc . line})
        (print_str_slice ":")
        (print_u32 {parse_err . loc . col})
        (print_str_slice " - ")
        (print_str {parse_err . &message})
        (print_str_slice "\n")

        (Parser/CompileError/free parse_err)

        (return (proc_exit 1))
    ))

    {&exprs : (& Vec<Parser/SExpr>) = {parse_res . data}}

    (dump_exprs &exprs)
    (println)

    ; TODO: free &exprs
    (Vec/free &source)
    (Heap/free {file_name . data})
))

(fn dump_exprs [(&exprs (& Vec<Parser/SExpr>))] [] (
    {i : u32 = 0}

    (loop (
        (if {i == (Vec/len &exprs)}
            (break)
        )

        (dump_expr {Parser/SExpr @ (Vec/at &exprs i)})

        (if {i != {(Vec/len &exprs) - 1}} (do
            (print_char (char_code " "))
        ))

        {i = {i + 1}}
    ))
))

(fn dump_expr [(expr Parser/SExpr)] [] (
    (if {expr . kind == (enum.kind Parser/SExpr/Atom)} (do
        {atom : Parser/SExpr/Atom = {Parser/SExpr/Atom @ {expr . ref}}}
        (print_str {atom . &value})
        (return)
    ))

    (print_char (char_code "("))

    {list : Parser/SExpr/List = {Parser/SExpr/List @ {expr . ref}}}
    (dump_exprs {list . &value})

    (print_char (char_code ")"))
))
