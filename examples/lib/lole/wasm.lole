(struct Vec<Lole/Wasm/WasmFnType> (actual Vec))
(struct Vec<Lole/Wasm/WasmImport> (actual Vec))
(struct Vec<u32> (actual Vec))
(struct Vec<Lole/Wasm/WasmLimits> (actual Vec))
(struct Vec<Lole/Wasm/WasmGlobal> (actual Vec))
(struct Vec<Lole/Wasm/WasmExport> (actual Vec))
(struct Vec<Lole/Wasm/WasmFn> (actual Vec))
(struct Vec<Lole/Wasm/WasmData> (actual Vec))
(struct Vec<Lole/Wasm/WasmType> (actual Vec))
(struct Vec<Lole/Wasm/WasmInstr> (actual Vec))
(struct Vec<Lole/Wasm/WasmLocals> (actual Vec))

(struct Lole/Wasm/WasmModule
    (&types (& Vec<Lole/Wasm/WasmFnType>))
    (&imports (& Vec<Lole/Wasm/WasmImport>))
    (&functions (& Vec<u32>))
    (&memories (& Vec<Lole/Wasm/WasmLimits>))
    (&globals (& Vec<Lole/Wasm/WasmGlobal>))
    (&exports (& Vec<Lole/Wasm/WasmExport>))
    (&codes (& Vec<Lole/Wasm/WasmFn>))
    (&datas (& Vec<Lole/Wasm/WasmData>))
)

(struct Lole/Wasm/WasmFnType
    (inputs (& Vec<Lole/Wasm/WasmType>))
    (outputs (& Vec<Lole/Wasm/WasmType>))
)

; TODO: implement
(struct Lole/Wasm/WasmImport)

; TODO: implement
(struct Lole/Wasm/WasmLimits)

; TODO: implement
(struct Lole/Wasm/WasmGlobal)

; values correspond to binary output
(global Lole/Wasm/WasmExportType/FUNC u32 0) ; 0x00
(global Lole/Wasm/WasmExportType/MEM u32 2) ; 0x02
(struct Lole/Wasm/WasmExportType (actual u32))

(struct Lole/Wasm/WasmExport
    (export_type Lole/Wasm/WasmExportType)
    (export_name (& String))
    (exported_item_index u32)
)

; values correspond to binary output
(struct Lole/Wasm/WasmType (actual u32))
(global Lole/Wasm/WasmType/I32 u32 127) ; 0x7f
(global Lole/Wasm/WasmType/I64 u32 126) ; 0x7e
(global Lole/Wasm/WasmType/F32 u32 125) ; 0x7d
(global Lole/Wasm/WasmType/F64 u32 124) ; 0x7c
(global Lole/Wasm/WasmType/V128 u32 123) ; 0x7b
(global Lole/Wasm/WasmType/FUNC_REF u32 112) ; 0x70
(global Lole/Wasm/WasmType/EXTERN_REF u32 111) ; 0x6f

(struct Lole/Wasm/WasmLocals
    (count u32)
    (value_type Lole/Wasm/WasmType)
)

(struct Lole/Wasm/WasmExpr
    (&instrs (& Vec<Lole/Wasm/WasmInstr>))
)

(struct Lole/Wasm/WasmFn
    (&locals (& Vec<Lole/Wasm/WasmLocals>))
    (expr Lole/Wasm/WasmExpr)
)

; TODO: implement
(struct Lole/Wasm/WasmData)

(fn Lole/Wasm/WasmModule/new [] [(& Lole/Wasm/WasmModule)] (
    (return (new Lole/Wasm/WasmModule (do
        (Vec/new 1 (sizeof Lole/Wasm/WasmFnType))
        (Vec/new 1 (sizeof Lole/Wasm/WasmImport))
        (Vec/new 1 (sizeof u32))
        (Vec/new 1 (sizeof Lole/Wasm/WasmLimits))
        (Vec/new 1 (sizeof Lole/Wasm/WasmGlobal))
        (Vec/new 1 (sizeof Lole/Wasm/WasmExport))
        (Vec/new 1 (sizeof Lole/Wasm/WasmFn))
        (Vec/new 1 (sizeof Lole/Wasm/WasmData))
    )))
))

(fn Lole/Wasm/WasmModule/free [(&self (& Lole/Wasm/WasmModule))] [] (
    {self : Lole/Wasm/WasmModule = {Lole/Wasm/WasmModule @ &self}}
    (Vec/free {self . &types})
    (Vec/free {self . &imports})
    (Vec/free {self . &functions})
    (Vec/free {self . &memories})
    (Vec/free {self . &globals})
    (Vec/free {self . &exports})
    (Vec/free {self . &codes})
    (Vec/free {self . &datas})
))
