include "lib/std";
include "lib/wasi";

struct Args {
    argc: u32,
    argv: &* &*u8,
    argv_buf: &*u8,
};

fn Args_load() -> Args {
    let argc_ref = alloc(ALLOC_STACK, sizeof u32) as &u32;
    defer free(ALLOC_STACK, argc_ref, sizeof u32);
    let argv_buf_size_ref = alloc(ALLOC_STACK, sizeof u32) as &u32;
    defer free(ALLOC_STACK, argv_buf_size_ref, sizeof u32);

    let _ = Wasi_args_sizes_get(argc_ref, argv_buf_size_ref);
    let argv_buf_size = *argv_buf_size_ref;
    let argc = *argc_ref;

    let argv = Heap_alloc(argc * sizeof &*u8) as &* &*u8;
    let argv_buf = Heap_alloc(argv_buf_size) as &* u8;
    let _ = Wasi_args_get(argv, argv_buf);

    return Args {
        argc: argc,
        argv: argv,
        argv_buf: argv_buf,
    };
};

fn Args_free(self: Args) {
    Heap_free(self.argv);
    Heap_free(self.argv_buf);
};

fn Args_get(self: Args, i: u32) -> StringSlice {
    let arg = *((self.argv as u32 + i * sizeof &*u8) as &* &*u8);
    return std_c_str_to_slice(arg);
};
