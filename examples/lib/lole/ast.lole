(alias Vec<Lole/Ast/SExpr> Vec)

(struct Lole/Ast/Location
    (file_name StringSlice)
    (offset u32)
    (length u32)
    (line u32)
    (col u32)
)

(fn Lole/Ast/Location/clone [(self Lole/Ast/Location)] Lole/Ast/Location (
    {clone := self}
    {clone . file_name = (StringSlice/clone {self . file_name})}
    (return clone)
))

(struct Lole/Ast/CompileError
    (&message (& String))
    (loc Lole/Ast/Location)
)

(fn Lole/Ast/CompileError/free [(self Lole/Ast/CompileError)] void (
    (Vec/free {self . &message})
))

(alias Lole/Ast/AtomKind u32)
(alias Lole/Ast/AtomKind/SYMBOL {0 as u32})
(alias Lole/Ast/AtomKind/STRING {1 as u32})

(alias Lole/Ast/SExpr/ATOM {0 as u32})
(alias Lole/Ast/SExpr/LIST {1 as u32})
(struct Lole/Ast/SExpr
    (kind u32) ; Lole/Ast/SExpr/ATOM | Lole/Ast/SExpr/LIST
    (&value (& void)) ; (& Lole/Ast/SExpr/Atom) | (& Lole/Ast/SExpr/List)
)
(struct Lole/Ast/SExpr/Atom
    (&value (& String))
    (kind Lole/Ast/AtomKind)
    (loc Lole/Ast/Location)
)
(struct Lole/Ast/SExpr/List
    (&value (& Vec<Lole/Ast/SExpr>))
    (loc Lole/Ast/Location)
)

(fn Lole/Ast/SExpr/free [(self Lole/Ast/SExpr)] void (
    (if {self . kind == Lole/Ast/SExpr/ATOM} (do
        {atom := {Lole/Ast/SExpr/Atom @ {self . &value}}}
        (Vec/free {atom . &value})
        (return)
    ))

    {list := {Lole/Ast/SExpr/List @ {self . &value}}}
    (Vec<Lole/Ast/SExpr>/free {list . &value})
))

(fn Vec<Lole/Ast/SExpr>/free [(&self (& Vec))] void (
    {i := 0}
    (loop (
        (if {i == (Vec/len &self)} (break))

        (Lole/Ast/SExpr/free {Lole/Ast/SExpr @ (Vec/at &self i)})

        {i += 1}
    ))

    (Vec/free &self)
))

(fn Lole/Ast/SExpr/loc [(self Lole/Ast/SExpr)] Lole/Ast/Location (
    (if {self . kind == Lole/Ast/SExpr/ATOM} (do
        {atom := {Lole/Ast/SExpr/Atom @ {self . &value}}}
        (return {atom . loc})
    ))

    {list := {Lole/Ast/SExpr/List @ {self . &value}}}
    (return {list . loc})
))
