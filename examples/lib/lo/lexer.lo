include "./utils.lo";

type LoTokenType = u8;
const LoTokenType::StringLiteral = 0 as u8;
const LoTokenType::CharLiteral   = 1 as u8;
const LoTokenType::IntLiteral    = 2 as u8;
const LoTokenType::Symbol        = 3 as u8;
const LoTokenType::Delim         = 4 as u8;
const LoTokenType::Operator      = 5 as u8;

fn LoTokenType::to_str(self): str {
    if self == LoTokenType::StringLiteral {
        return "StringLiteral";
    } else if self == LoTokenType::CharLiteral {
        return "CharLiteral";
    } else if self == LoTokenType::IntLiteral {
        return "IntLiteral";
    } else if self == LoTokenType::Symbol {
        return "Symbol";
    } else if self == LoTokenType::Delim {
        return "Delim";
    } else if self == LoTokenType::Operator {
        return "Operator";
    };

    unreachable;
};

struct LoToken {
    type_: LoTokenType,
    // NOTE: this points inside of file contents
    // and is only valid while file buffer is not freed
    repr: str,
    loc: LoLocation,
    value: &void,
};

fn LoToken::free(self) {
    if self.type_ == LoTokenType::IntLiteral {
        heap::free(self.value);
    } else if self.type_ == LoTokenType::StringLiteral {
        (self.value as String).free();
    };
};

fn LoToken::clone(self): LoToken {
    if self.type_ == LoTokenType::IntLiteral {
        self.value = heap::new!<u64>(*(self.value as &u64)) as &void;
    } else if self.type_ == LoTokenType::StringLiteral {
        self.value = String::clone(self.value as String) as &void;
    };

    return self;
};

fn LoToken::is_any(self, type_: LoTokenType): bool {
    return self.type_ == type_;
};

fn LoToken::is(self, type_: LoTokenType, repr: str): bool {
    return self.is_any(type_) && self.repr.equals(repr);
};

struct LoTokenStream {
    tokens: &Vec of LoToken,
    index: u32,
    terminal_token: LoToken,
};

fn LoTokenStream::new(tokens: &Vec of LoToken, eof_location: LoLocation): &LoTokenStream {
    return heap::new!<LoTokenStream>(LoTokenStream {
        tokens: tokens,
        index: 0,
        terminal_token: LoToken {
            type_: LoTokenType::Symbol,
            repr: "<EOF>",
            loc: eof_location,
            value: 0 as &void,
        },
    });
};

fn LoTokenStream::free(&self) {
    for i in 0..self.tokens.size {
        let t = self.tokens.get!<LoToken>(i);
        t.free();
    };

    heap::free(self as &void);
};

struct LoTokenMaybe {
    token: LoToken,
    exists: bool,
};

macro LoTokenMaybe::some!(t: LoToken): LoTokenMaybe {
    LoTokenMaybe { token: t, exists: true };
};

macro LoTokenMaybe::none!(tokens: &LoTokenStream): LoTokenMaybe {
    LoTokenMaybe { token: tokens.terminal_token, exists: false };
};

fn LoTokenStream::peek(&self): LoTokenMaybe {
    if self.index >= self.tokens.size {
        return LoTokenMaybe::none!(self);
    };

    return LoTokenMaybe::some!(
        self.tokens.get!<LoToken>(self.index)
    );
};

fn LoTokenStream::next(&self): LoTokenMaybe {
    let token = self.peek();
    if token.exists {
        self.index += 1;
    };
    return token;
};

fn LoTokenStream::expect(&self, type_: LoTokenType, repr: str): LoToken throws &LoError {
    let maybe_token = self.peek();

    if maybe_token.exists && maybe_token.token.is(type_, repr) {
        let _ = self.next();
        return maybe_token.token;
    };

    let unexpected = maybe_token.token; // defaults to terminal token

    let message = String::from_str("Unexpected token '");
    message.push_str(unexpected.repr);
    message.push_str("', wanted '");
    message.push_str(repr);
    message.push_str("'");

    throw heap::new!<LoError>(LoError {
        message: message,
        loc: unexpected.loc,
    });
};

fn LoTokenStream::expect_any(&self, type_: LoTokenType): LoToken throws &LoError {
    let maybe_token = self.peek();

    if maybe_token.exists && maybe_token.token.is_any(type_) {
        let _ = self.next();
        return maybe_token.token;
    };

    let unexpected = maybe_token.token; // defaults to terminal token

    let message = String::from_str("Unexpected token '");
    message.push_str(unexpected.repr);
    message.push_str("', wanted '");
    message.push_str(LoTokenType::to_str(type_));
    message.push_str("'");

    throw heap::new!<LoError>(LoError {
        message: message,
        loc: unexpected.loc,
    });
};

fn LoTokenStream::eat(&self, type_: LoTokenType, repr: str): LoTokenMaybe throws &LoError {
    let token = self.expect(type_, repr) catch err {
        let some_token = self.peek();
        if !some_token.exists {
            throw err;
        };

        return LoTokenMaybe::none!(self);
    };

    return LoTokenMaybe::some!(token);
};

fn LoTokenStream::eat_any(&self, type_: LoTokenType): LoTokenMaybe throws &LoError {
    let token = self.expect_any(type_) catch err {
        let some_token = self.peek();
        if !some_token.exists {
            throw err;
        };

        return LoTokenMaybe::none!(self);
    };

    return LoTokenMaybe::some!(token);
};

struct LoLexer {
    file_index: u32,
    chars: str,
    index: u32,
    line: u32,
    col: u32,
    was_newline: bool,
};

fn LoLexer::new(file_index: u32, chars: str): &LoLexer {
    return heap::new!<LoLexer>(LoLexer {
        file_index: file_index,
        chars: chars,
        index: 0,
        line: 1,
        col: 1,
        was_newline: false,
    });
};

fn LoLexer::lex_all(&self): &LoTokenStream throws &LoError {
    let tokens = Vec::new!<LoToken>();

    self.skip_space();

    loop {
        if self.index >= self.chars.size {
            break;
        };

        tokens.push!<LoToken>(self.lex_token()?);

        self.skip_space();
    };

    return LoTokenStream::new(tokens, self.loc());
};

type LexResult = LoToken throws &LoError;

fn LoLexer::lex_token(&self): LexResult {
    let char = self.current_char()?;

    if char == '\'' as u8 {
        return self.lex_char()?;
    };
    if char == '"' as u8 {
        return self.lex_string()?;
    };
    if char_is_numeric(char) {
        return self.lex_int_literal()?;
    };
    // NOTE: must be after int because is_symbol_char matches digits
    if LoLexer::is_symbol_char(char) {
        return self.lex_symbol()?;
    };
    if LoLexer::is_delim_char(char) {
        return self.lex_delim()?;
    };
    if LoLexer::is_operator_start_char(char) {
        return self.lex_operator()?;
    };

    let message = String::from_str("Unexpected char: ");
    message.push(char);

    throw heap::new!<LoError>(LoError {
        message: message,
        loc: self.loc(),
    });
};

fn LoLexer::lex_symbol(&self): LexResult {
    let loc = self.loc();

    loop {
        let char = self.current_char()?;

        if !LoLexer::is_symbol_char(char) {
            break;
        };

        self.next_char();
    };

    loc.end_pos = self.pos();

    return LoToken {
        type_: LoTokenType::Symbol,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        value: 0 as &void,
    };
};

fn LoLexer::lex_char(&self): LexResult {
    let loc = self.loc();

    self.next_char(); // skip start quote

    let char = self.current_char()?;
    let value = char;

    if char == '\\' as u8 {
        self.next_char();

        char = self.current_char()?;

        if char == 'n' as u8 {
            value = '\n' as u8;
        } else if char == 'r' as u8 {
            value = '\r' as u8;
        } else if char == 't' as u8 {
            value = '\t' as u8;
        } else if char == '0' as u8 {
            value = '\0' as u8;
        } else if char == '\\' as u8 {
            value = '\\' as u8;
        } else if char == '\'' as u8 {
            value = '\'' as u8;
        } else {
            let message = String::from_str("ParseError: Invalid escape sequence: \\");
            message.push(char as u8);

            throw heap::new!<LoError>(LoError {
                message: message,
                loc: self.loc(),
            });
        };
    };

    self.next_char(); // skip actual character

    if self.current_char()? != '\'' as u8 {
        let message = String::from_str("ParseError: Unexpected character `");
        message.push(char as u8);
        message.push_str("`, expected `'`");

        throw heap::new!<LoError>(LoError {
            message: message,
            loc: self.loc(),
        });
    };

    self.next_char(); // skip end quote

    loc.end_pos = self.pos();

    return LoToken {
        type_: LoTokenType::Symbol,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        value: value as &void,
    };
};

fn LoLexer::lex_string(&self): LexResult {
    let loc = self.loc();

    self.next_char(); // skip start quote

    let value = String::new(10);

    loop {
        let char = self.current_char()?;

        if char == '"' as u8 {
            break;
        } else if char == '\\' as u8 {
            self.next_char();

            char = self.current_char()?;

            if char == 'n' as u8 {
                value.push('\n' as u8);
            } else if char == 'r' as u8 {
                value.push('\r' as u8);
            } else if char == 't' as u8 {
                value.push('\t' as u8);
            } else if char == '0' as u8 {
                value.push('\0' as u8);
            } else if char == '\\' as u8 {
                value.push('\\' as u8);
            } else if char == '"' as u8 {
                value.push('"' as u8);
            } else {
                let message = String::from_str("ParseError: Invalid escape sequence: \\");
                message.push(char as u8);

                throw heap::new!<LoError>(LoError {
                    message: message,
                    loc: self.loc(),
                });
            };
        } else {
            value.push(char);
        };

        self.next_char();
    };

    self.next_char(); // skip end quote

    loc.end_pos = self.pos();

    return LoToken {
        type_: LoTokenType::StringLiteral,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        value: value as &void,
    };
};

fn LoLexer::lex_int_literal(&self): LexResult {
    let loc = self.loc();

    let char = self.current_char()?;
    let is_hex = false;
    if char == '0' as u8 {
        let next_char = self.peek_next_char() catch err {
            err.free();
            '\0' as u8;
        };

        if next_char == 'x' as u8 {
            is_hex = true;
            self.next_char(); // skip '0'
            self.next_char(); // skip 'x'
        };
    };

    let value = 0u64;
    loop {
        char = self.current_char()?;

        if char == '_' as u8 {
            self.next_char();
        } else if char >= '0' as u8 && char <= '9' as u8 {
            if is_hex {
                value *= 16u64;
            } else {
                value *= 10u64;
            };
            value += (char - '0' as u8) as u64;

            self.next_char();
        } else if is_hex && char >= 'A' as u8 && char <= 'F' as u8 {
            value *= 16u64;
            value += 10u64 + (char - 'A' as u8) as u64;

            self.next_char();
        } else {
            break;
        };
    };

    loc.end_pos = self.pos();

    return LoToken {
        type_: LoTokenType::IntLiteral,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        value: heap::new!<u64>(value) as &void,
    };
};

fn LoLexer::lex_delim(&self): LexResult {
    let loc = self.loc();

    self.next_char(); // skip delimiter char

    return LoToken {
        type_: LoTokenType::Delim,
        repr: self.chars.slice(loc.pos.offset, self.index),
        loc: loc,
        value: 0 as &void,
    };
};

const OPERATORS_COUNT = 37; // TODO(qol): find a way to get length of array
const OPERATORS = [str][
    "=",   // Assignment
    "==",  // Equality comparison
    "!=",  // Nonequality comparison
    "!",   // Logical NOT
    "&&",  // Short-circuiting logical AND
    "||",  // Short-circuiting logical OR
    "<",   // Less than comparison
    "<=",  // Less than or equal to comparison
    ">",   // Greater than comparison
    ">=",  // Greater than or equal to comparison
    "+",   // Arithmetic addition
    "+=",  // Arithmetic addition and assignment
    "-",   // Arithmetic subtraction
    "-=",  // Arithmetic subtraction and assignment
    "*",   // Arithmetic multiplication
    "*=",  // Arithmetic multiplication and assignment
    "/",   // Arithmetic division
    "/=",  // Arithmetic division and assignment
    "%",   // Arithmetic remainder
    "%=",  // Arithmetic remainder and assignment
    "&",   // Bitwise AND / Pointer to one
    "&*",  // Pointer to any amount
    "&=",  // Bitwise AND and assignment
    "<<",  // Left-shift
    "<<=", // Left-shift and assignment
    "=>",  // Part of match arm syntax
    ">>",  // Right-shift
    ">>=", // Right-shift and assignment
    "^",   // Bitwise exclusive OR
    "^=",  // Bitwise exclusive OR and assignment
    "|",   // Bitwise OR
    "|=",  // Bitwise OR and assignment
    ".",   // Member access
    "..",  // Range operator
    ":",   // Type separator
    "::",  // Path separator
    "@",   // Memory index separator, defer label prefix
];

fn LoLexer::is_operator_start_char(char: u8): bool {
    for i in 0..OPERATORS_COUNT {
        let op = *array_at!<str>(OPERATORS, i);
        if op.char_at(0) == char {
            return true;
        };
    };
    return false;
};

fn LoLexer::lex_operator(&self): LexResult {
    let loc = self.loc();
    let repr = "";

    loop {
        repr = self.chars.slice(loc.pos.offset, self.index + 1);

        let is_start_of_operator = false;
        for i in 0..OPERATORS_COUNT {
            let op = *array_at!<str>(OPERATORS, i);
            if op.starts_with(repr) {
                is_start_of_operator = true;
                break;
            };
        };

        if !is_start_of_operator {
            repr = repr.slice(0, repr.size - 1);
            break;
        };

        self.next_char();
    };

    let matched_fully = false;
    for i in 0..OPERATORS_COUNT {
        let op = *array_at!<str>(OPERATORS, i);
        if op.equals(repr) {
            matched_fully = true;
            break;
        };
    };

    if !matched_fully {
        let message = String::from_str("Unexpected char: ");
        message.push(self.current_char()?);

        throw heap::new!<LoError>(LoError {
            message: message,
            loc: self.loc(),
        });
    };

    loc.end_pos = self.pos();

    return LoToken {
        type_: LoTokenType::Operator,
        repr: repr,
        loc: loc,
        value: 0 as &void,
    };
};

fn LoLexer::skip_space(&self) {
    let char = '\0' as u8;
    loop {
        char = self.current_char() catch err {
            err.free();
            return;
        };

        if !LoLexer::is_space_char(char) {
            break;
        };

        self.next_char();
    };

    // skip comment
    if char == '/' as u8 {
        let next = self.peek_next_char() catch err {
            err.free();
            return;
        };

        if next != '/' as u8 {
            return;
        };

        loop {
            self.next_char();

            char = self.current_char() catch err {
                err.free();
                return;
            };

            if char == '\n' as u8 {
                self.skip_space();
                break;
            };
        };
    };
};

fn LoLexer::next_char(&self) {
    self.index += 1;

    let char = self.current_char() catch err {
        err.free();
        return;
    };

    self.col += 1;

    if char == '\n' as u8 {
        // NOTE(edge case): when first character is encountered
        //  was_newline is not true but rather undefined,
        //  thus we don't bump the line count
        if self.index != 0 && self.was_newline {
            self.line += 1;
        };
        self.was_newline = true;
        return;
    };

    if self.was_newline {
        self.line += 1;
        self.col = 1;
        self.was_newline = false;
        return;
    };
};

fn LoLexer::current_char(&self): u8 throws &LoError {
    if self.index >= self.chars.size {
        throw self.err_unexpected_eof();
    };

    return self.chars.char_at(self.index);
};

fn LoLexer::peek_next_char(&self): u8 throws &LoError {
    if self.index + 1 >= self.chars.size {
        throw self.err_unexpected_eof();
    };

    return self.chars.char_at(self.index + 1);
};

fn LoLexer::err_unexpected_eof(&self): &LoError {
    return heap::new!<LoError>(LoError {
        message: String::from_str("ParseError: Unexpected EOF"),
        loc: self.loc(),
    });
};

fn LoLexer::loc(&self): LoLocation {
    return LoLocation {
        file_index: self.file_index,
        pos: self.pos(),
        end_pos: self.pos(),
    };
};

fn LoLexer::pos(&self): LoPosition {
    return LoPosition {
        offset: self.index,
        line: self.line,
        col: self.col,
    };
};

fn LoLexer::is_space_char(char: u8): bool {
    return char == ' '  as u8
        || char == '\n' as u8
        || char == '\t' as u8
        || char == '\r' as u8;
};

fn LoLexer::is_symbol_char(char: u8): bool {
    return (char >= 'a' as u8 && char <= 'z' as u8)
        || (char >= 'A' as u8 && char <= 'Z' as u8)
        || (char >= '0' as u8 && char <= '9' as u8)
        || char == '_' as u8;
};

fn LoLexer::is_delim_char(char: u8): bool {
    return char == '(' as u8 || char == ')' as u8
        || char == '{' as u8 || char == '}' as u8
        || char == '[' as u8 || char == ']' as u8
        || char == ',' as u8 || char == ';' as u8;
};
