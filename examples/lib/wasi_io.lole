(fn fd_read_all [(fd u32)] [&String] (
    {&output : &String = (Vec/new 256 1)}
    {&chunk : &*u8 = (Stack/alloc 256)}

    {&in_vec : &*IOVec = (Stack/alloc (sizeof IOVec))}
    {IOVec @ &in_vec = (struct.new IOVec &chunk 256)}

    {&nread : &u32 = (Stack/alloc (sizeof u32))}

    (loop (
        {err : WasiErr = (fd_read fd &in_vec 1 &nread)}

        {nread : u32 = {i32 @ &nread}}

        (if {nread == 0} (break))

        (Vec/push_all &output &chunk nread)
    ))

    (Stack/free 256)
    (Stack/free (sizeof IOVec))
    (Stack/free (sizeof u32))

    (return &output)
))

(fn fd_write_all [(fd u32) (message StringSlice)] [] (
    {&out_vec : &*IOVec = (Stack/alloc (sizeof IOVec))}
    {IOVec @ &out_vec = message}

    {&nwritten : &u32 = (Stack/alloc (sizeof u32))}
    {err : WasiErr = (fd_write fd &out_vec 1 &nwritten)}

    (Stack/free (sizeof IOVec))
    (Stack/free (sizeof u32))
))

(fn fd_pipe [(fd_in i32) (fd_out i32) (chunk_size u32)] [i32] (
    {&chunk : &*u8 = (Stack/alloc chunk_size)}

    {&iov : &*IOVec = (Stack/alloc (sizeof IOVec))}
    {i32 @ &iov = &chunk}

    {&nread : &u32 = (Stack/alloc (sizeof u32))}

    {result : i32 = 0}

    {io_res : i32}

    (loop (
        {i32 @ &iov @ (sizeof u32) = chunk_size}
        {io_res = (fd_read fd_in &iov 1 &nread)}
        (if {io_res != 0} (do
            {result = 1}
            (break)
        ))

        {nread : u32 = {i32 @ &nread}}
        (if {nread == 0} (break))

        {i32 @ &iov @ (sizeof u32) = nread}
        {io_res = (fd_write fd_out &iov 1 &nread)}
        (if {io_res != 0} (do
            {result = 1}
            (break)
        ))
    ))

    (Stack/free (sizeof u32))
    (Stack/free (sizeof IOVec))
    (Stack/free chunk_size)

    (return result)
))
