include "lib/cli";
include "lib/fs";

type Tile = bool;
const Tile::TREE = 1 as Tile;
const Tile::EMPTY = 0 as Tile;

const SLOPE_I = 1;
const SLOPE_J = 3;

fn main() {
    let input = fs::read_file("./aoc2020/3.txt");
    defer input.free();

    let map = Map::parse(input);
    defer map.free();

    let tree_count = 0;
    let i = 0;
    let j = 0;

    loop {
        i += SLOPE_I;
        j += SLOPE_J;

        if i == map.cols->size {
            break;
        };

        if map.get(i, j) == Tile::TREE {
            tree_count += 1;
        };
    };

    print_u32(tree_count);
    puts("\n");
};

type Vec::Tile = Vec;
type Vec::Vec::Tile = Vec;

struct Map {
    cols: &Vec::Vec::Tile,
};

fn Map::parse(input: &String) -> Map {
    let cols = Vec::new(sizeof &Vec::Tile);
    let row = Vec::new(sizeof Tile);

    let i = 0;
    loop {
        if i == input->size {
            break;
        };

        let char = *(input.at(i) as &u8);
        if char == char_code "#" as u8 {
            *(row.push() as &Tile) = Tile::TREE;
        };
        if char == char_code "." as u8 {
            *(row.push() as &Tile) = Tile::EMPTY;
        };
        if char == char_code "\n" as u8 {
            *(cols.push() as & &Vec::Tile) = row;
            row = Vec::new(sizeof Tile);
        };

        i += 1;
    };

    return Map { cols: cols };
};

fn Map::get(self, i: u32, j: u32) -> Tile {
    let row = *(self.cols.at(i) as & &Vec::Tile);
    return *(row.at(j % row->size) as &Tile);
};

fn Map::free(self) {
    let i = 0;
    loop {
        if i == self.cols->size {
            break;
        };

        let row = *(self.cols.at(i) as & &Vec::Tile);
        row.free();

        i += 1;
    };
    self.cols.free();
};
