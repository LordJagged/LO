(mod lib/std)
(mod lib/compiler)

; public interface
(fn CodeGen/codegen [(&module (& Compiler/WasmModule))] [(& Vec<u8>)] (
    {&binary : (& Vec<u8>) = (Vec/new 100 1)}
    {&section : (& Vec<u8>) = (Vec/new 100 1)}
    (defer (Vec/free &section))

    (CodeGen/write_magic_and_version &binary)

    (CodeGen/write_type_section &section &module)
    (CodeGen/write_section &binary &section 1)

    (CodeGen/write_import_section &section &module)
    (CodeGen/write_section &binary &section 2)

    (CodeGen/write_function_section &section &module)
    (CodeGen/write_section &binary &section 3)

    (CodeGen/write_memory_section &section &module)
    (CodeGen/write_section &binary &section 5)

    (CodeGen/write_global_section &section &module)
    (CodeGen/write_section &binary &section 6)

    (CodeGen/write_export_section &section &module)
    (CodeGen/write_section &binary &section 7)

    (CodeGen/write_code_section &section &module)
    (CodeGen/write_section &binary &section 10)

    (CodeGen/write_data_section &section &module)
    (CodeGen/write_section &binary &section 11)

    (return &binary)
))

(fn CodeGen/write_magic_and_version [(&out (& Vec<u8>))] [] (
    (Vec/push_u8 &out 0)
    (Vec/push_all &out "asm")

    (Vec/push_u8 &out 1)
    (Vec/push_u8 &out 0)
    (Vec/push_u8 &out 0)
    (Vec/push_u8 &out 0)
))

(fn CodeGen/write_section [(&out (& Vec<u8>)) (&section (& Vec<u8>)) (section_code u8)] [] (
    (CodeGen/write_u8 &out section_code)
    (CodeGen/write_u32 &out (Vec/len &section))
    (Vec/append &out &section)
))

; TODO: implement
(fn CodeGen/write_type_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_import_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_function_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_memory_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_global_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_export_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_code_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_data_section [(&out (& Vec<u8>)) (&module (& Compiler/WasmModule))] [] ())

; TODO: implement
(fn CodeGen/write_u8 [(&out (& Vec<u8>)) (value u8)] [] ())

; TODO: implement
(fn CodeGen/write_u32 [(&out (& Vec<u8>)) (value u32)] [] ())
