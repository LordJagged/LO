include "lib/std";

struct ParseIntResult {
    value: u32,
    chars_consumed: u32,
};

fn parse_u32(input: str): ParseIntResult {
    let result = ParseIntResult {
        value: 0,
        chars_consumed: 0,
    };

    loop {
        if result.chars_consumed == input.size {
            break;
        };

        let char = input.char_at(result.chars_consumed) as u32;
        if char >= '0' && char <= '9' {
            result.value *= 10;
            result.value += char as u32 - '0';
        } else {
            break;
        };

        result.chars_consumed += 1;
    };

    return result;
};

fn parse_u32_hex(input: str): ParseIntResult {
    let result = ParseIntResult {
        value: 0,
        chars_consumed: 0,
    };

    loop {
        if result.chars_consumed == input.size {
            break;
        };

        // TODO: consider proper `else if` support
        let char = input.char_at(result.chars_consumed) as u32;
        if char >= '0' && char <= '9' {
            result.value *= 16;
            result.value += char as u32 - '0';
        } else {if char >= 'a' && char <= 'f' {
            result.value *= 16;
            result.value += 11 + char as u32 - 'a';
        } else {
            break;
        };};

        result.chars_consumed += 1;
    };

    return result;
};
