(mod lib/std)
(mod lib/wasi)
(mod lib/print)
(mod lib/args)
(mod parser)

(mem m1 :min 1000)
(export mem m1 :as memory)

(struct MinifyResult (ok bool) (data ptr))

(struct &Vec<Parser/SExpr> (actual ptr))
(struct &Vec<u8> (actual ptr))

(export main :as _start)
(fn main [(chars StringSlice)] [i32] (
    {parse_res : Parser/ParseResult}
    {parse_res = (Parser/parse chars)}

    (if (not {parse_res . ok}) (do
        (return 1)
    ))

    {&exprs : &Vec<Parser/SExpr>}
    {&exprs = {parse_res . data}}
    {i : u32}
    {i = 0}
    ;; TODO: implement dump
    ;; {&output : &Vec<u8>}
    ;; {&output = (Vec/new 256 1)}

    (loop (
        (if {i == (Vec/len &exprs)}
            (break)
        )

        ;; TODO: implement dump
        ;; {expr : Parser/SExpr}
        ;; {expr = (load Parser/SExpr {&exprs + {i * (sizeof Parser/SExpr)}})}
        ;; (dump_expr expr &output)

        {i = {i + 1}}
    ))

    {&str : &Vec<u8>}
    {&str = (std/u32_to_string i)}
    (Vec/push_u8 &str CHAR_NEWLINE)
    
    {str : Vec}
    {str = (load Vec &str)}

    (print_str_slice {str . data_ref} {str . length})

    (return 0)
))

;; TODO: implement dump
;; (fn dump_expr [(expr Parser/SExpr) (&output &Vec)] [] (
    
;; ))
