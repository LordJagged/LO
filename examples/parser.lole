(mem m1 :min 1000)

(export Parser/parse :as parse)

;; exporting for testing
(export mem m1 :as memory)
(export Parser/skip_space :as skip_space)
(export Parser/char_at :as char_at)
(export Parser/index_to_position :as index_to_position)

(global true bool 1)
(global false bool 0)
(global CHAR_TAB       u8 009)
(global CHAR_NEWLINE   u8 010)
(global CHAR_SPACE     u8 032)
(global CHAR_SEMICOLON u8 059)
(global CHAR_LPAREN u8 040) (global CHAR_RPAREN u8 041)
(global CHAR_LCURLY u8 123) (global CHAR_RCURLY u8 125)
(global CHAR_LBRACK u8 091) (global CHAR_RBRACK u8 093)

(struct StringSlice
    (data ptr)
    (size u32)
)

(fn StringSlice/char_at [(self StringSlice) (index u32)] [u8] (
    (load i32/u8 {{self . data} + index})
))

;; TODO: implement
(struct ParseResult)

;; TODO: implement
(struct ParseSubResult)

; TODO: implement
(fn Parser/parse [(chars StringSlice)] [ParseResult] ())

;; TODO: implement
(fn parse_expr [(chars StringSlice) (index u32)] [ParseSubResult] ())

;; TODO: implement
(fn parse_atom [(chars StringSlice) (index u32)] [ParseSubResult] ())

;; TODO: implement
(fn parse_list [(chars StringSlice) (index u32)] [ParseSubResult] ())

;; TODO: test comment skipping
(fn Parser/skip_space [(chars StringSlice) (index u32)] [u32] (
    {char_res : CharAtResult}

    (loop (
        {char_res = (Parser/char_at chars index)}
        (if (not {char_res . ok}) (break))
        (if (not (Parser/is_space {char_res . char})) (break))
        {index = {index + 1}}
    ))

    (if {{char_res . ok} && {{char_res . char} == CHAR_SEMICOLON}} (do
        {index = {index + 1}}

        (loop (
            {char_res = (Parser/char_at chars index)}
            (if (not {char_res . ok}) (break))
            (if {{char_res . char} == CHAR_NEWLINE} (break))
            {index = {index + 1}}
        ))

        (if {{char_res . ok} && {{char_res . char} == CHAR_SEMICOLON}}
            {index = {index + 1}}
        )

        (return (Parser/skip_space chars index))
    ))

    index
))

(fn Parser/is_list_start [(start u8) (end u8)] [bool] (
    (|| (||
    { end == CHAR_LPAREN}
    { end == CHAR_LCURLY})
    { end == CHAR_LBRACK})
))

(fn Parser/is_list_end [(start u8) (end u8)] [bool] (
    (|| (||
    { end == CHAR_RPAREN}
    { end == CHAR_RCURLY})
    { end == CHAR_RBRACK})
))

(fn Parser/is_valid_list_chars [(start u8) (end u8)] [bool] (
    (|| (||
    {{start == CHAR_LPAREN} && { end == CHAR_RPAREN}}
    {{start == CHAR_LCURLY} && { end == CHAR_RCURLY}})
    {{start == CHAR_LBRACK} && { end == CHAR_RBRACK}})
))

(fn Parser/is_space [(char u8)] [bool] (
    (|| (||
    {char == CHAR_SPACE}
    {char == CHAR_NEWLINE})
    {char == CHAR_TAB})
))

(struct CharAtResult (ok bool) (char u8))

;; TODO: this does not match rust version
(fn Parser/char_at [(chars StringSlice) (index u32)] [CharAtResult] (
    (if {index >= {chars . size}}
        (return (struct.new CharAtResult false 0))
    )

    (struct.new CharAtResult true (StringSlice/char_at chars index))
))

(fn Parser/index_to_position [(chars StringSlice) (index u32)] [
    u32 ; line
    u32 ; col
] (
    {line : u32}
    {col : u32}
    {(line col) = (pack 1 1)}

    {char_index : u32}
    {char_index = 0}
    (loop (
        (if {char_index >= {chars . size}} (break))
        (if {char_index >= index} (break))

        {char : u32}
        {char = (StringSlice/char_at chars char_index)}

        (if {char == CHAR_NEWLINE} (do
            {col = 1}
            {line = {line + 1}}
            {char_index = {char_index + 1}}
            (continue)
        ))

        {col = {col + 1}}
        {char_index = {char_index + 1}}
    ))

    (pack line col)
))
