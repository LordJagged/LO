(mem m1 :min 1000)
(export mem m1 :as memory)

(export parse :as parse)
(export skip_space :as skip_space)
(export char_at :as char_at)

; TODO: implement
(fn parse ((data i32) (size i32)) (
    i32 ; ok
    i32 ; index
) (
    (return (i32 0) (i32 0))
))

; TODO: add support for comments
(fn skip_space ((data i32) (size i32) (index i32)) (
    i32 ; index
) (
    (let char_ok i32)
    (let char i32)

    (loop (
        (set (char_ok char) (char_at data size index))

        (if (i32.ne char_ok (i32 1))
            (break)
        )

        (if (i32.ne char (i32 32)) ; space
            (break)
        )

        (set index (i32.add index (i32 1)))
    ))

    index
))

(fn char_at ((data i32) (size i32) (index i32)) (
    i32 ; ok
    i32 ; char
) (
    (if (i32.ge_s index size)
        (return (i32 0) (i32 0))
    )

    (return
        (i32 1)
        (i32.load8_u (i32.add data index))
    )
))
