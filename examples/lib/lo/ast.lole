(alias Vec<Lo/Ast/SExpr> Vec)

(struct Lo/Ast/Location
    (file_name StringSlice)
    (offset u32)
    (item_size u32)
    (line u32)
    (col u32)
)

(fn Lo/Ast/Location/clone [(self Lo/Ast/Location)] Lo/Ast/Location (
    {clone := self}
    {clone . file_name = (StringSlice/clone {self . file_name})}
    (return clone)
))

(struct Lo/Ast/CompileError
    (message (& String))
    (loc Lo/Ast/Location)
)

(fn Lo/Ast/CompileError/free [(self Lo/Ast/CompileError)] void (
    (Vec/free {self . message})
))

(alias Lo/Ast/AtomKind u32)
(alias Lo/Ast/AtomKind/SYMBOL 0)
(alias Lo/Ast/AtomKind/STRING 1)

(alias Lo/Ast/SExpr/ATOM 0)
(alias Lo/Ast/SExpr/LIST 1)
(struct Lo/Ast/SExpr
    (kind u32) ; Lo/Ast/SExpr/ATOM | Lo/Ast/SExpr/LIST
    (value (& void)) ; (& Lo/Ast/SExpr/Atom) | (& Lo/Ast/SExpr/List)
)
(struct Lo/Ast/SExpr/Atom
    (value (& String))
    (kind Lo/Ast/AtomKind)
    (loc Lo/Ast/Location)
)
(struct Lo/Ast/SExpr/List
    (value (& Vec<Lo/Ast/SExpr>))
    (loc Lo/Ast/Location)
)

(fn Lo/Ast/SExpr/free [(self Lo/Ast/SExpr)] void (
    (if {self . kind == Lo/Ast/SExpr/ATOM} (
        {atom := {Lo/Ast/SExpr/Atom @ {self . value}}}
        (Vec/free {atom . value})
        (return)
    ))

    {list := {Lo/Ast/SExpr/List @ {self . value}}}
    (Vec<Lo/Ast/SExpr>/free {list . value})
))

(fn Vec<Lo/Ast/SExpr>/free [(self (& Vec))] void (
    {i := 0}
    (loop (
        (if {i == {self -> size}} (
            (break)
        ))

        (Lo/Ast/SExpr/free {Lo/Ast/SExpr @ (Vec/at self i)})

        {i += 1}
    ))

    (Vec/free self)
))

(fn Lo/Ast/SExpr/loc [(self Lo/Ast/SExpr)] Lo/Ast/Location (
    (if {self . kind == Lo/Ast/SExpr/ATOM} (
        {atom := {Lo/Ast/SExpr/Atom @ {self . value}}}
        (return {atom . loc})
    ))

    {list := {Lo/Ast/SExpr/List @ {self . value}}}
    (return {list . loc})
))
