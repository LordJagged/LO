include "lib/std";

type str = StringSlice;

struct fs {};

// fs expects host to preopen "." on fd 3
const fs::CWD_PREOPEN_FD = 3;

// TODO: return errors instead of exiting with logs
fn fs::read_file(file_name: str) -> &String {
    let open_res = fs::_open_file(file_name);
    if open_res.err != 0 {
        fputs(WASI_FD_STDERR, "Error opening file: ");
        fputs(WASI_FD_STDERR, file_name);
        fputs(WASI_FD_STDERR, "\n");
        Wasi::proc_exit(1);
    };
    let fd = open_res.fd;

    let output = Vec::new(256, sizeof u8);

    // TODO(bug): ALLOC_STACK is messing stuff up for some reason
    let chunk = alloc(ALLOC_HEAP, 256) as &*u8;
    defer free(ALLOC_HEAP, chunk, 256);

    let in_vec = alloc(ALLOC_STACK, sizeof Wasi::IOVec) as &Wasi::IOVec;
    *in_vec = Wasi::IOVec { base: chunk, size: 256 };
    defer free(ALLOC_STACK, in_vec, sizeof Wasi::IOVec);

    let nread_ref = alloc(ALLOC_STACK, sizeof u32) as &u32;
    defer stack::free(sizeof u32);

    loop {
        let _err = Wasi::fd_read(fd, in_vec, 1, nread_ref);

        let nread = *nread_ref;
        if nread == 0 {
            break;
        };

        Vec::push_all(output, chunk, nread);
    };

    return output;
};

struct fs::FdOpenRes {
    err: Wasi::Err,
    fd: u32,
};

fn fs::_open_file(file_path: str) -> fs::FdOpenRes {
    let fd_ref = alloc(ALLOC_STACK, sizeof u32) as &u32;
    defer free(ALLOC_STACK, fd_ref, sizeof u32);

    let err = Wasi::path_open(
        fs::CWD_PREOPEN_FD, 0,
        file_path, 0, 2i64, 0i64, 0,
        fd_ref,
    );

    return fs::FdOpenRes { err: err, fd: *fd_ref };
};
