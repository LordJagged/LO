struct wasi {};

type wasi::Err = u32;
const wasi::Err::SUCCESS = 0;
const wasi::Err::BADF    = 8;

const wasi::FD_STDIN  = 0;
const wasi::FD_STDOUT = 1;
const wasi::FD_STDERR = 2;

struct wasi::IOVec {
    base: &*u8,
    size: u32,
};

import from "wasi_snapshot_preview1" {
    fn wasi::path_open(
        dirfd:                u32, // The file descriptor representing the directory that the file is located in.
        dirflags:             u32, // Flags specifying how the path will be resolved.
        path:                &*u8, // A wasm pointer to a null-terminated string containing the path of the file or directory to open.
        path_len:             u32, // The length of the path string.
        oflags:               u32, // Flags specifying how the file will be opened.
        fs_rights_base:       u64, // The rights of the created file descriptor.
        fs_rights_inheriting: u64, // The rights of file descriptors derived from the created file descriptor.
        fdflags:              u32, // The flags of the file descriptor.
        fd:                  &u32, // A wasm pointer to a wasiFd variable where the new file descriptor will be stored.
    ) -> wasi::Err;

    fn wasi::fd_read(
        fd:                   u32, // file_descriptor
        iovs:       &*wasi::IOVec, // The pointer to the iov array
        iovs_len:             u32, // Amount of wasi::IOVec
        nread:                u32, // Pointer to store the number of bytes read
    ) -> wasi::Err;

    fn wasi::fd_write(
        fd:                   u32, // file_descriptor
        iovs:       &*wasi::IOVec, // The pointer to the iov array
        iovs_len:             u32, // Amount of wasi::IOVec
        nwritten:             u32, // Pointer to store the number of bytes written
    ) -> wasi::Err;

    fn wasi::fd_close(
        fd:                   u32, // file_descriptor
    ) -> wasi::Err;

    fn wasi::args_sizes_get(
        argc:                &u32, // Pointer to where the number of arguments will be written.
        argv_buf_size:       &u32, // Pointer to where the size of the argument string data will be written.
    ) -> wasi::Err;

    fn wasi::args_get(
        argv:                &u32, // Pointer to a buffer where the argument pointers will be written.
        argv_buf:            &u32, // Pointer to a buffer where the argument string data will be written.
    ) -> wasi::Err;

    fn wasi::proc_exit(
        code:                 u32, // exit code
    );
};
