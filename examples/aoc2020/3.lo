include "lib/cli";
include "lib/fs";

type Tile = bool;
const Tile::TREE = 1 as Tile;
const Tile::EMPTY = 0 as Tile;

type Vec::Tile = Vec;
type Vec::Vec::Tile = Vec;

const SLOPE_RIGHT = 3;
const SLOPE_DOWN = 1;

fn main() -> u32 {
    let input = fs::read_file("./aoc2020/3.txt");
    defer Vec::free(input);

    let map = Map_parse(input);
    defer Map_free(map);

    let tree_count = 0;
    let i = 0;
    let j = 0;

    loop {
        i += SLOPE_DOWN;
        j += SLOPE_RIGHT;

        if i == map->size {
            break;
        };

        if Map_get(map, i, j) == Tile::TREE {
            tree_count += 1;
        };
    };

    print_u32(tree_count);
    puts("\n");

    return 0;
};

fn Map_parse(input: &String) -> &Vec::Vec::Tile {
    let map = Vec::new(4, sizeof &Vec::Tile);
    let row = Vec::new(4, sizeof Tile);

    let i = 0;
    loop {
        if i == input->size {
            break;
        };

        let char = *(Vec::at(input, i) as &u8);
        if char == char_code "#" as u8 {
            *(Vec::push(row) as &Tile) = Tile::TREE;
        };
        if char == char_code "." as u8 {
            *(Vec::push(row) as &Tile) = Tile::EMPTY;
        };
        if char == char_code "\n" as u8 {
            *(Vec::push(map) as & &Vec::Tile) = row;
            row = Vec::new(4, sizeof Tile);
        };

        i += 1;
    };

    return map;
};

fn Map_get(map: &Vec::Vec::Tile, i: u32, j: u32) -> Tile {
    let row = *(Vec::at(map, i) as & &Vec::Tile);
    return *(Vec::at(row, j % row->size) as &Tile);
};

fn Map_free(map: &Vec::Vec::Tile) {
    let i = 0;
    loop {
        if i == map->size {
            break;
        };

        let row = Vec::at(map, i) as & &Vec::Tile;
        Vec::free(row);

        i += 1;
    };

    Vec::free(map);
};
