include "../std.lo";
include "../fs.lo";
include "../string_map.lo";

include "./utils.lo";
include "./wasm.lo";
include "./lexer.lo";

type LoType::_ = u32;
struct LoType {
    kind: LoType::_,
    data: &void,
};
// TODO: define all types

const LoType::Void = 0;
macro LoType::Void!(): LoType {
    LoType { kind: LoType::Void, data: 0 as &void };
};

const LoType::U32 = 1;
macro LoType::U32!(): LoType {
    LoType { kind: LoType::U32, data: 0 as &void };
};

struct LoFnParam {
    name: &String,
    type_: LoType,
    loc: LoLocation,
};

struct LoFnType {
    inputs: &Vec of LoType,
    output: LoType,
};

struct LoLocalDef {
    index: u32,
    value_type: LoType,
    loc: LoLocation,
};

struct LoFnDecl {
    fn_name: &String,
    method_name: &String,
    loc: LoLocation,
    fn_params: &Vec of LoFnParam,
    lo_type: LoFnType,
    wasm_type: WasmFnType,
    locals: StringMap of LoLocalDef,
};

struct LoFnDef {
    local: bool,
    fn_index: u32,
    fn_params: &Vec of LoFnParam,
    type_index: u32,
    type_: LoFnType,
    loc: LoLocation,
};

struct LoFnExport {
    in_name: &String,
    out_name: &String,
};

struct LoFnBody {
    fn_index: u32,
    type_index: u32,
    locals: StringMap of LoLocalDef,
    locals_last_index: u32,
    body: &LoTokenStream,
};

type LoInstr::_ = u32;
struct LoInstr {
    kind: LoInstr::_,
    data: &void,
};

const LoInstr::U32Const = 0;
macro LoInstr::U32Const!(value: u32): LoInstr {
    LoInstr {
        kind: LoInstr::U32Const,
        data: value as &void,
    };
};

const LoInstr::Return = 1;
macro LoInstr::Return!(value: LoInstr): LoInstr {
    LoInstr {
        kind: LoInstr::Return,
        data: heap::new!<LoInstr>(value) as &void,
    };
};

fn LoInstr::free(self) {
    if self.kind == LoInstr::Return {
        heap::free(self.data);
    };
};

fn LoInstr::lower_all(
    exprs: &Vec of LoInstr,
    out: &Vec of WasmInstr,
) {
    for i in 0..exprs.size {
        exprs.get!<LoInstr>(i).lower(out);
    };
};

// TODO: implement complete
fn LoInstr::lower(
    self,
    out: &Vec of WasmInstr,
) {
    if self.kind == LoInstr::U32Const {
        out.push!<WasmInstr>(WasmInstr::I32Const::new(self.data as i32));
        return;
    };

    if self.kind == LoInstr::Return {
        (*(self.data as &LoInstr)).lower(out);
        out.push!<WasmInstr>(WasmInstr::Return::new());
        return;
    };

    unreachable;
};
