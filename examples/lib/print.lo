include "./std.lo";
include "./wasi.lo";

fn puts(value: str) {
    let _ = fputs(wasi::FD_STDOUT, value);
};
fn eputs(value: str) {
    let _ = fputs(wasi::FD_STDERR, value);
};
fn fputs(fd: u32, value: str): u32 throws wasi::Err {
    let nwritten = tmp_alloc!<u32>();
    let value_ref = tmp_alloc!<str>();
    *value_ref = value;

    let err = wasi::fd_write(fd, value_ref as &wasi::IOVec, 1, nwritten);
    if err != wasi::Err::SUCCESS {
        throw err;
    };

    return *nwritten;
};

fn print_u32(num: u32) {
    let _ = fprint_u32(wasi::FD_STDOUT, num);
};
fn eprint_u32(num: u32) {
    let _ = fprint_u32(wasi::FD_STDERR, num);
};
fn fprint_u32(fd: u32, num: u32): u32 throws wasi::Err {
    let out = u32::to_string_using(num, alloc::STACK);
    defer out.free();

    return fprint_str(fd, out as &str) catch err {
        throw err;
    };
};

fn print_u64(num: u64) {
    let _ = fprint_u64(wasi::FD_STDOUT, num);
};
fn eprint_u64(num: u64) {
    let _ = fprint_u64(wasi::FD_STDERR, num);
};
fn fprint_u64(fd: u32, num: u64): u32 throws wasi::Err {
    let out = u64::to_string_using(num, alloc::STACK);
    defer out.free();

    return fprint_str(fd, out as &str) catch err {
        throw err;
    };
};

fn print_str(value: &str) {
    let _ = fprint_str(wasi::FD_STDOUT, value);
};
fn eprint_str(value: &str) {
    let _ = fprint_str(wasi::FD_STDERR, value);
};
fn fprint_str(fd: u32, value: &str): u32 throws wasi::Err {
    let nwritten = tmp_alloc!<u32>();

    let err = wasi::fd_write(fd, value as &wasi::IOVec, 1, nwritten);
    if err != wasi::Err::SUCCESS {
        throw err;
    };

    return *nwritten;
};
