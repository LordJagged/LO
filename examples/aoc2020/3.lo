include "lib/cli";
include "lib/fs";

type Tile = bool;
const Tile::TREE = true;
const Tile::EMPTY = false;

const SLOPE_I = 1;
const SLOPE_J = 3;

fn main() {
    let input = fs::read_file("./aoc2020/3.txt");
    defer input.free();

    let map = Map::parse(input);
    defer map.free();

    let tree_count = 0;
    let i = 0;
    let j = 0;

    loop {
        i += SLOPE_I;
        j += SLOPE_J;

        if i == map.rows.size {
            break;
        };

        if map.get(i, j) == Tile::TREE {
            tree_count += 1;
        };
    };

    print_u32(tree_count);
    puts("\n");
};

type Vec::Tile = Vec;
type Vec::Vec::Tile = Vec;

struct Map {
    rows: &Vec::Vec::Tile,
};

fn Map::parse(input: &String): Map {
    let rows = Vec::new!<&Vec::Tile>();
    let current_row = Vec::new!<Tile>();

    for i in 0..input.size {
        let char = input.get!<u8>(i) as u32;
        if char == '#' {
            current_row.push!<Tile>(Tile::TREE);
        };
        if char == '.' {
            current_row.push!<Tile>(Tile::EMPTY);
        };
        if char == '\n' {
            rows.push!<&Vec::Tile>(current_row);
            current_row = Vec::new!<Tile>();
        };
    };

    return Map { rows: rows };
};

fn Map::get(self, i: u32, j: u32): Tile {
    // TODO: this is not working:
    // let row = self.rows.get!<&Vec::Tile>(i);
    let row = *(self.rows.at(i) as & &Vec::Tile);
    return *(row.at(j % row.size) as &Tile);
};

fn Map::free(self) {
    for i in 0..self.rows.size {
        // TODO: this is not working:
        // let row = self.rows.get!<&Vec::Tile>(i);
        let row = *(self.rows.at(i) as & &Vec::Tile);
        row.free();
    };
    self.rows.free();
};
