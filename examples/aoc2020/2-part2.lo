include "../lib/cli.lo";
include "../lib/fs.lo";

type Step = u32;
const Step::READ_START_INDEX = 0;
const Step::READ_END_INDEX = 1;
const Step::READ_CHAR_TO_FIND = 2;
const Step::CHECK_PASSWORD = 3;

struct PasswordCheckState {
    step: Step,
    start_index: u32,
    end_index: u32,
    current_index: u32,
    match_found: bool,
    char_to_check: u32,
};

fn initial_check_state(): PasswordCheckState {
    return PasswordCheckState {
        step: Step::READ_START_INDEX,
        start_index: 0,
        end_index: 0,
        current_index: 0,
        match_found: false,
        char_to_check: 0,
    };
};

fn main() {
    let input = fs::read_file("./examples/aoc2020/2.txt");
    defer input.free();

    let valid_passwords_count = 0;

    let state = initial_check_state();

    for i in 0..input.size {
        let char = input.get!<u8>(i) as u32;
        if state.step == Step::READ_START_INDEX {
            if char == '-' {
                state.step = Step::READ_END_INDEX;
                continue;
            };

            state.start_index *= 10;
            state.start_index += char - '0';
        };
        if state.step == Step::READ_END_INDEX {
            if char == ' ' {
                state.step = Step::READ_CHAR_TO_FIND;
                continue;
            };

            state.end_index *= 10;
            state.end_index += char - '0';
        };
        if state.step == Step::READ_CHAR_TO_FIND {
            state.char_to_check = char;
            i += 2; // skip `${char}: `, (+1 will be skipped by loop)
            state.step = Step::CHECK_PASSWORD;
            continue;
        };
        if state.step == Step::CHECK_PASSWORD {
            if char == '\n' {
                state = initial_check_state();
                continue;
            };

            state.current_index += 1;
            if state.current_index == state.start_index {
                state.match_found = char == state.char_to_check;
            };
            if state.current_index == state.end_index {
                if char == state.char_to_check && !state.match_found {
                    valid_passwords_count += 1;
                };
                if char != state.char_to_check && state.match_found {
                    valid_passwords_count += 1;
                };
            };
        };
    };

    print_u32(valid_passwords_count);
    puts("\n");
};
