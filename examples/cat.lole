(mod lib/std)
(mod lib/wasi)
(mod lib/print)
(mod lib/args)

(mem m1 :min 1000)
(export mem m1 :as memory)

;; this program expects host to preopen "." on fd 3
(global CWD_PREOPEN_FD u32 3)

(export main :as _start)
(fn main [] [] (
    {args : Args}
    {args = (Args/load)}

    (if {{args . argc} != 2} (do
        (return (proc_exit 1))
    ))

    {file_path : StringSlice}
    {file_path = (Args/get args 1)}

    {err : u32}
    {fd : u32}
    {(err fd) = (fd_open file_path)}

    {err = (fd_pipe fd FD_STDOUT 256)}
    (if {err != 0} (do 
        (return (proc_exit 1))
    ))

    {err = (fd_close fd)}

    (return (proc_exit 0))
))

(fn fd_open [(file_path StringSlice)] [u32 u32] (
    {&fd : u32}
    {&fd = (Mem/alloc 2)} ;; aligning fd pointer for wasmtime
    {&fd = (Mem/alloc (sizeof u32))}

    {err : u32}
    {err = (path_open
        CWD_PREOPEN_FD 0
        file_path 0 (i64 2) (i64 0) 0
        &fd
    )}
    (if {err != 0} (do
        (Mem/free &fd)
        (return (pack err 0))
    ))

    {fd : u32}
    {fd = (load i32 &fd)}
    
    (Mem/free &fd)
    (return (pack 0 fd))
))

(fn fd_pipe [(fd_in i32) (fd_out i32) (chunk_size u32)] [i32] (
    {&chunk : &*u8}
    {&chunk = (Mem/alloc chunk_size)}

    {&iov : &*IOVec}
    {&iov = (Mem/alloc (sizeof IOVec))}
    (store i32 &iov &chunk)

    {&nread : &u32}
    {&nread = (Mem/alloc (sizeof u32))}

    {result : i32}
    {result = 0}

    {io_res : i32}

    (loop (
        (store i32 {&iov + (sizeof u32)} chunk_size)
        {io_res = (fd_read fd_in &iov 1 &nread)}
        (if {io_res != 0} (do
            {result = 1}
            (break)
        ))
        
        {nread : u32}
        {nread = (load i32 &nread)}

        (if {nread == 0} (break))

        (store i32 {&iov + (sizeof u32)} nread)
        {io_res = (fd_write fd_out &iov 1 &nread)}
        (if {io_res != 0} (do
            {result = 1}
            (break)
        ))
    ))

    (Mem/free &chunk)
    (Mem/free &iov)
    (Mem/free &nread)

    (return result)
))
