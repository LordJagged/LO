(struct Vec<Lole/Ast/SExpr> (actual Vec))

(struct Lole/Ast/Location
    (file_name StringSlice)
    (offset u32)
    (length u32)
    (line u32)
    (col u32)
)

(fn Lole/Ast/Location/clone [(self Lole/Ast/Location)] [Lole/Ast/Location] (
    {clone : Lole/Ast/Location = self}
    {clone . file_name = (StringSlice/clone {self . file_name})}
    (return clone)
))

(struct Lole/Ast/CompileError
    (&message (& String))
    (loc Lole/Ast/Location)
)

(fn Lole/Ast/CompileError/free [(self Lole/Ast/CompileError)] [] (
    (Vec/free {self . &message})
))

(struct Lole/Ast/AtomKind (actual u32))
(global Lole/Ast/AtomKind/SYMBOL u32 0)
(global Lole/Ast/AtomKind/STRING u32 1)

(enum Lole/Ast/SExpr
    (Atom
        (&value (& String))
        (kind Lole/Ast/AtomKind)
        (loc Lole/Ast/Location)
    )
    (List
        (&value (& Vec<Lole/Ast/SExpr>))
        (loc Lole/Ast/Location)
    )
)

(fn Lole/Ast/SExpr/free [(self Lole/Ast/SExpr)] [] (
    (if {self . kind == (enum.kind Lole/Ast/SExpr/Atom)} (do
        {atom : Lole/Ast/SExpr/Atom = {Lole/Ast/SExpr/Atom @ {self . ref}}}
        (Vec/free {atom . &value})
        (return)
    ))

    {list : Lole/Ast/SExpr/List = {Lole/Ast/SExpr/List @ {self . ref}}}
    (Vec<Lole/Ast/SExpr>/free {list . &value})
))

(fn Vec<Lole/Ast/SExpr>/free [(&self (& Vec))] [] (
    {i : u32 = 0}
    (loop (
        (if {i == (Vec/len &self)} (break))

        (Lole/Ast/SExpr/free {Lole/Ast/SExpr @ (Vec/at &self i)})

        {i += 1}
    ))

    (Vec/free &self)
))

(fn Lole/Ast/SExpr/loc [(self Lole/Ast/SExpr)] [Lole/Ast/Location] (
    (if {self . kind == (enum.kind Lole/Ast/SExpr/Atom)} (do
        {atom : Lole/Ast/SExpr/Atom = {Lole/Ast/SExpr/Atom @ {self . ref}}}
        (return {atom . loc})
    ))

    {list : Lole/Ast/SExpr/List = {Lole/Ast/SExpr/List @ {self . ref}}}
    (return {list . loc})
))
