include "lib/cli";
include "lib/fs";

fn main() -> u32 {
    let input = fs_read_file("./aoc2020/4.test.txt");
    defer Vec_free(input);

    let valid_passwords = 0;

    let passwords = Stack_alloc(sizeof StringSlice) as &StringSlice;
    *passwords = String_to_slice(input);
    defer Stack_free(sizeof StringSlice);

    loop {
        let password = StringSlice_cut_at(passwords, "\n\n");

        // TODO: validate password

        puts(password);
        puts("\n------------------\n");

        if passwords->size == 0 {
            break;
        };
    };

    puts("valid passwords: ");
    print_u32(valid_passwords);
    puts("\n");

    return 0;
};

fn StringSlice_cut_at(self: &StringSlice, delim: StringSlice) -> StringSlice {
    let cut_start = 0;
    let cut_width = 0;
    loop {
        if cut_start == self->size {
            break;
        };

        if StringSlice_char_at(*self, cut_start)
                == StringSlice_char_at(delim, cut_width) {
            cut_width += 1;
        } else {
            cut_width = 0;
        };

        if cut_width == delim.size {
            break;
        };

        cut_start += 1;
    };

    let piece = StringSlice {
        data: self->data,
        size: cut_start - cut_width - 1
    };

    self->data as u32 += cut_start + 1;
    self->size -= cut_start;

    return piece;
};
