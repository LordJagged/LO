(mod lib/lole/wasm)
(mod lib/lole/ast)

(alias Vec<String> Vec)
(alias Dict<Lole/Ir/FnDef> Dict)
(alias Dict<Lole/Ir/FnBody> Dict)
(alias Vec<Lole/Ir/FnExport> Vec)
(alias Dict<bool> Dict)
(alias Dict<Lole/Ir/StructDef> Dict)
(alias Dict<u32> Dict)
(alias Dict<Lole/Ir/GlobalDef> Dict)
(alias Dict<Lole/Ir/LocalDef> Dict)
(alias Dict<Lole/Ast/SExpr> Dict)

(struct Lole/Ir/ModuleContext
    (wasm_module (& Lole/Wasm/WasmModule)) ; not owned
    (memory_names (& Vec<String>))
    (imported_fns_count u32)
    (fn_defs (& Dict<Lole/Ir/FnDef>))
    (fn_bodies (& Dict<Lole/Ir/FnBody>))
    (fn_exports (& Vec<Lole/Ir/FnExport>))
    (included_modules (& Vec<String>)) ; BTreeSet<String>
    (struct_defs (& Dict<Lole/Ir/StructDef>))
    (enum_kinds (& Dict<u32>))
    (globals (& Dict<Lole/Ir/GlobalDef>))
    (data_size (& u32)) ; Rc<RefCell<u32>>
    (string_pool (& Dict<u32>)) ; RefCell<BTreeMap<String, i32>>
)

(struct Lole/Ir/FnContext
    (module (& Lole/Ir/ModuleContext)) ; 'a
    (fn_type (& Lole/Wasm/WasmFnType)) ; 'a
    (locals (& Dict<Lole/Ir/LocalDef>)) ; 'a mut
    (locals_last_index u32)
    (non_arg_locals (& Vec<Lole/Wasm/WasmType>))
    (defers (& Dict<Lole/Ast/SExpr>))
)

(struct Lole/Ir/FnDef
    (local bool)
    (fn_index u32)
    (type_index u32)
)

; TODO: implement
(struct Lole/Ir/GlobalDef)

(struct Lole/Ir/FnBody
    (fn_index u32)
    (type_index u32)
    (locals (& Dict<Lole/Ir/LocalDef>)) ; RefCell<BTreeMap<String, LocalDef>>
    (locals_last_index u32)
    (body (& Vec<Lole/Ast/SExpr>))
)

(struct Lole/Ir/FnExport
    (in_name (& String))
    (out_name (& String))
    (loc Lole/Ast/Location)
)

; TODO: implement
(struct Lole/Ir/StructDef)

(fn Lole/Ir/ModuleContext/new [(wasm_module (& Lole/Wasm/WasmModule))] (& Lole/Ir/ModuleContext) (
    (return (new Lole/Ir/ModuleContext (Lole/Ir/ModuleContext
        :wasm_module wasm_module
        :memory_names (Vec/new 1 (sizeof String))
        :imported_fns_count 0
        :fn_defs (Dict/new 1 (sizeof Lole/Ir/FnDef))
        :fn_bodies (Dict/new 1 (sizeof Lole/Ir/FnBody))
        :fn_exports (Vec/new 1 (sizeof Lole/Ir/FnExport))
        :included_modules (Vec/new 1 (sizeof String))
        :struct_defs (Dict/new 1 (sizeof Lole/Ir/StructDef))
        :enum_kinds (Dict/new 1 (sizeof u32))
        :globals (Dict/new 1 (sizeof Lole/Ir/GlobalDef))
        :data_size (new u32 0)
        :string_pool (Dict/new 1 (sizeof u32))
    )))
))

; NOTE: this doesn't free `wasm_module` as it doesn't "own" it
(fn Lole/Ir/ModuleContext/free [(self (& Lole/Ir/ModuleContext))] void (
    (Vec/free {self -> memory_names})
    (Dict/free {self -> fn_defs})
    (Dict/free {self -> fn_bodies})
    (Vec/free {self -> fn_exports})
    (Vec/free {self -> included_modules})
    (Dict/free {self -> struct_defs})
    (Dict/free {self -> enum_kinds})
    (Dict/free {self -> globals})
    (free Alloc/HEAP {self -> data_size} (sizeof u32))
    (Dict/free {self -> string_pool})
))
