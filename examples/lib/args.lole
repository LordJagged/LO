(struct Args
    (argc u32)
    (&argv (&* (&* u8)))
    (&argv_buf (&* u8))
)

(fn Args/load [] [Args] (
    {&argc : (& u32) = (Stack/alloc (sizeof u32))}
    (defer (Stack/free (sizeof u32)))
    {&argv_buf_size : (& u32) = (Stack/alloc (sizeof u32))}
    (defer (Stack/free (sizeof u32)))
    (drop (args_sizes_get &argc &argv_buf_size))

    {argv_buf_size : u32 = {i32 @ &argv_buf_size}}
    {argc : u32 = {i32 @ &argc}}

    {&argv : (&* (&* u8)) = (Heap/alloc {argc * (sizeof (&* u8))})}
    {&argv_buf : (&* u8) = (Heap/alloc {i32 @ &argv_buf_size})}
    (drop (args_get &argv &argv_buf))

    (return (struct.new Args argc &argv &argv_buf))
))

(fn Args/free [(self Args)] [] (
    (Heap/free {self . &argv})
    (Heap/free {self . &argv_buf})
))

(fn Args/get [(self Args) (i u32)] [StringSlice] (
    {&arg : (&* u8) = {i32 @ {self . &argv} @ {i * (sizeof (&* u8))}}}
    (return (struct.new StringSlice
        &arg (Args/_c_str_len &arg)
    ))
))

(fn Args/_c_str_len [(&str (&* u8))] [u32] (
    {len : u32 = 0}

    (loop (
        (if {{i32/u8 @ &str @ len} == 0} (break))

        {len += 1}
    ))

    (return len)
))
