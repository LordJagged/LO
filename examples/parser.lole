(mem m1 :min 1000)
(export mem m1 :as memory)

(export parse :as parse)
(export skip_space :as skip_space)
(export char_at :as char_at)

(struct StringSlice
    (data i32)
    (size i32)
)

(fn StringSlice/char_at [(self StringSlice) (index i32)] [i32] (
    (i32.load8_u {{self . data} + index})
))

; TODO: implement
(fn parse [(chars StringSlice)] [
    i32 ; ok
    i32 ; index
] (
    {index : i32}
    {index = (skip_space chars 0)}

    (return 0 0)
))

; TODO: add support for comments
(fn skip_space [(chars StringSlice) (index i32)] [
    i32 ; index
] (
    {res : CharAtResult}

    (loop (
        {res = (char_at chars index)}

        (if {{res . ok} != 1}
            (break)
        )

        (if {{res . char} != 32} ; space
            (break)
        )

        {index = {index + 1}}
    ))

    index
))

(struct CharAtResult
    (ok i32)
    (char i32)
)

(fn char_at [(chars StringSlice) (index i32)] [CharAtResult] (
    (if {index >= {chars . size}}
        (return (struct.new CharAtResult 0 0))
    )

    (struct.new CharAtResult 1 (StringSlice/char_at chars index))
))
