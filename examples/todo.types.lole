(alias ParseResult (Result
    (Vec SExpr)
    ParseError
))

(enum SExpr
    (Atom String)
    (List (Vec (SExpr)))
)

(struct ParseError
    (message String)
    (index i32)
)

(struct String
    (data (array-ptr u8))
    (size i32)
)

(generic (T) (struct Vec
    (data (array-ptr T))
    (size i32)
    (capacity i32)
))

(generic (R E) (enum Result
    (Ok R)
    (Err E)
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; original
(alias ParseResult (Result
    (Vec SExpr)
    ParseError
))

;; expand generic Result
(alias ParseResult (enum
    (Ok (Vec SExpr))
    (Err ParseError)
))

;; expand generic Vec
(alias ParseResult (enum
    (Ok (struct
        (data (array-ptr SExpr))
        (size i32)
        (capacity i32)
    ))
    (Err ParseError)
))

;; expand struct ParseError
(alias ParseResult (enum
    (Ok (struct
        (data (array-ptr SExpr))
        (size i32)
        (capacity i32)
    ))
    (Err (struct
        (message String)
        (index i32)
    ))
))

;; expand struct String
(alias ParseResult (enum
    (Ok (struct
        (data (array-ptr SExpr))
        (size i32)
        (capacity i32)
    ))
    (Err (struct
        (message (struct
            (data (array-ptr u8))
            (size i32)
        ))
        (index i32)
    ))
))

;; lower to i32/i64 values (except enum for readability)
(alias ParseResult (enum
    (Ok (i32 i32 i32))
    (Err (i32 i32 i32))
))

;; lower to i32/i64 values completely
(alias ParseResult (i32 i32 i32 i32))

;; result: nice representation,
;; only 3 bytes of space wasted for Result's enum tag

;; General thoughts:
;; good enough, even though boolean and char types
;;     take much more space then needed

;; packing multiple types into one doesn't make a lot of sence
;; but specialized types can be provided instead:
;;   like boolean8, byte4, etc

;; structs and enums should be passed by value
;; would be nice to show user the size of types
;; if struct is huge, user can choose to pass it by reference instead
